package app.utils;

import java.util.ArrayList;
import java.util.List;

import app.graph.structure.Edge;
import app.graph.structure.Graph;
import app.graph.structure.Vertex;

public class DiversParser {

	
	public static void saveTXT(Graph g, String pathName) {
		Out out = new Out(pathName);
		writeTXT(g, out);
	}


	/**
	 * Method to save the graph in a TXT format
	 * 
	 * @param g
	 *            Graph
	 * @param out
	 *            path to save the Graph g
	 */
	public static void writeTXT(Graph g, Out out) {

		List<Edge> listTmp = new ArrayList<Edge>();

		for (Edge edge : g.getListEdge()) {
			boolean contieneListTmp = false;

			for (Edge edgeTmp : listTmp) {
				if (edgeTmp.containVertices(edge.getIdSource(), edge.getIdTarget())) {
					contieneListTmp = true;
					break;
				}
			}

			if (!contieneListTmp) {
				out.print(edge.getIdSource());
				out.print(" ");
				out.print(edge.getIdTarget());
				out.print(" ");

				// printing edge between the source and target
				List<Edge> edgeTwoNodes = new ArrayList<Edge>();
				edgeTwoNodes = g.edgesBetweenTwoNodes(edge.getIdSource(), edge.getIdTarget());
				if (edgeTwoNodes != null) {
					for (int i = 0; i < edgeTwoNodes.size(); i++) {
						out.print(edgeTwoNodes.get(i).getType());
						try {
							Integer nextEdgeType = edgeTwoNodes.get(i+1).getType();
							if(nextEdgeType!=null){
								out.print(",");
							}	
						} catch (Exception e) {
							// TODO: handle exception
						}
					}
				}
				out.println();
				listTmp.add(edge);
			}
		}

	}
	
	
	/**
	 * Save a Graph to pathName
	 * 
	 * @param g
	 *            Graph to save
	 * @param pathName
	 *            PathName to save
	 */
	public static void saveGML(Graph g, String pathName) {
		Out out = new Out(pathName);
		writeGML(g, out);
	}

	/**
	 * Load a Graph from a pathName
	 * 
	 * @param pathName
	 *            PathName
	 */
	public static Graph loadGML(String pathName) {
		In in = new In(pathName);
		Graph graphTemp = new Graph(in);
		in.close();
		return graphTemp;
	}
	
	public static Graph loadSUMGRA(String pathName){
		In in = new In(pathName);
		Graph graphSumgra = in.graphSumgra(in.readAll());
		System.out.println("loaded SuMGra");
		return graphSumgra;
	}
	

	/**
	 * 
	 * Method to write a graph in GML format
	 * 
	 * @param g
	 *            graph
	 * @param pathName
	 *            path to save GML format
	 */
	public static void writeGML(Graph g, Out out) {
		out.println("Creator \"Graphes::Utils::GMLParser\"");
		out.println("graph [");
		out.println("  comment \"This is a graph generated by Graphes\"");
		for (Vertex node : g.getListNode()) {
			out.println("  node [");
			out.println("    id " + node.getId());
			out.println("    label \"" + node.getLabel() + "\"");
//			out.println("    pin \"" + node.getAttachedPin() + "\"");
			out.println("    weight " + node.getWeight());
			out.println("    graphics [");
			out.println("	   x " + node.getPosition().getX1());
			out.println("	   y " + node.getPosition().getY1());
			out.println("	   w " + node.getDiameter());
			out.println("	   h " + node.getDiameter());
			out.println("	   type \"rectangle\"");
			out.println("    ]");
			out.println("  ]");
		}

		for (Edge edge : g.getListEdge()) {
			out.println("  edge [ ");
			out.println("    id " + edge.getId());
			out.println("    source " + edge.getIdSource());
			out.println("    target " + edge.getIdTarget());
			out.println("    label \"" + edge.getLabel() + "\"");
			out.println("    subgraph " + edge.getType());
			out.println("    graphics [");
			out.println("	   arrow \"last\"");
			out.println("    ]");
			out.println("  ]");
		}
		out.println("]");
		out.close();
	}

}
